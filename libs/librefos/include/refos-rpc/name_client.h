/* DO NOT EDIT MANUALLY!!!
   This file was generated by CIDL.

   Copyright 2016, Data61
   Commonwealth Scientific and Industrial Research Organisation (CSIRO)
   ABN 41 687 119 230.

   This software may be distributed and modified according to the terms of
   the BSD 2-Clause license. Note that NO WARRANTY is provided.
   See "LICENSE_BSD2.txt" for details.

   @TAG(D61_BSD)
*/

#ifndef _RPC_INTERFACE_NAME_CLIENT_H_
#define _RPC_INTERFACE_NAME_CLIENT_H_

#include <refos-rpc/rpc.h>
#include <refos/refos.h>

#include <refos/vmlayout.h>


/*! @file
    @brief Generated file for the name interface. Please do NOT edit this file. */

#ifndef _RPC_NAME_LABEL_ENUMS_
#define _RPC_NAME_LABEL_ENUMS_
/*! @brief RPC syscall label enums for name interface. */
enum rpc_name_label_enum {
    RPC_NAME_LABEL_MIN = NAMESERV_METHODS_BASE,
    RPC_NSV_REGISTER,
    RPC_NSV_UNREGISTER,
    RPC_NSV_RESOLVE_SEGMENT_INTERNAL,
    RPC_NAME_LABEL_MAX
};
#endif

/*! @brief Register as a server under the given name so clients can find us.

   Servers need to create an endpoint and call this on the process server, in order for clients
   to be able to find this server and to connect to it. The anon cap will be given to clients
   looking for this server, and the client will make its connection call through the anon cap
   to establish a session.

   Re-registering will replace the current server anon cap.

   @param nameserv The name server to register onto.
   @param name String containing name to register under. (No ownership)
   @param ep The anonymous endpoint cap to register with.
   @return REFOS_ESUCCESS on success, refos_err_t error code otherwise. */
refos_err_t nsv_register(seL4_CPtr nameserv, char* name, seL4_CPtr ep);

/*! @brief Unregister as a server.

   Unregister as a server under given name, so clients are no longer able to find us
   under that name. Existing anon caps will be invalidated.

   @param nameserv The name server to unregister from.
   @param name String containing name to unregister for.
   @return REFOS_ESUCCESS on success, refos_err_t error code otherwise. */
refos_err_t nsv_unregister(seL4_CPtr nameserv, char* name);

/*! @brief Resolve the next segment of the given path at the given nameserv.

   Gives back an anon cap if the server is found. For details regarding the anon cap, refer to
   the documentation under nsv_register(). This function resolves a part of the name, returned
   as offset into the string that has been resolved. The rest of the path string may be
   resolved by another dataspace, and so forth, until we get to the end containing the endpoint
   to the server that actually contains the file. This allows for a simple hierachical
   namespace with distributed naming.

   @param nameserv The name server to resolve with.
   @param path The path to resolve.
   @param[out] resolvedBytes Output containing number of bytes resolved.
   @param errval Outut error code, if an error occured.
   @return 0 on error, anon capability to next name server on success. */
seL4_CPtr nsv_resolve_segment_internal(seL4_CPtr nameserv, char* path, int* resolvedBytes, refos_err_t* errval);

#endif /* _RPC_INTERFACE_NAME_CLIENT_H_ */

